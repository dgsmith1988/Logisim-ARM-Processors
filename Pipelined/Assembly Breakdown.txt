This file contains a break down of the assembly programs used to test the pipelined processor and verify the different components.
In general, they are based on the programs from the book used to illustrate the concepts.
Slight modifications are done (generally addressing) based on the Logisim-Evolution implementations.
The registers are initialized to a value corresponding to their number (R0 = 0, R1 = 1, ..., R10 = a). YOu need to manually do this in Logisim.
The data memory is intiialized to the /Memory_Contents/Data file.

********************Test 1********************
This is a small program I wrote to test/verify the other processors using all the different instruction types.
I might remove this or rewrite it depending on how everything goes with the other tests.
				Rn	 Rd      Src2
1110 01 000001 0000 0000 000000000000 = 0xE4100000 	;LDR R0 , [R0, #0] : R0 <= data at memory address (R0+0) = 1
1110 01 000001 0001 1100 000000001000 = 0xE411C008 	;LDR R12, [R1, #8] : R12 <= data at memory address (R1+8) = 8
1110 01 000000 0010 1101 000000000100 = 0xE402D004 	;STR R13, [R2, #4] : memory address (R2+4) <= R13, second data word is set to 0 (starts as 5)
1110 00 001000 0100 0011 000000000101 = 0xE0843005 	;ADD R3, R4, R5    : R3 <= R4 + R5 = 0 + 0 = 0
1110 10 10 111111111111111111111010   = 0xEAFFFFFA	;B -6  			   : PC should be set to 0, -6 is used as the offset as the immediate is added to PC+8


********************Datapath and Control Testing********************
This code is taken from Figure 7.43 to make it easier to learn the pipeline so you can follow along with the diagram.
The code doens't have any hazards or control instrunctions in it and is used to verify that the control and datapath are correct.

Cond Op	Funct	Rn	 Rd      Src2
1110 01 000001 0000 0010 000000001000 = 0xE4102008 	;LDR R2, [R0, #8]  : R2 <= data at memory address (R0+8) = 7
1110 00 001000 1001 0011 000000001010 = 0xE089300A 	;ADD R3, R9, R10   : R3 <= R9 + R10 = 9 + 10 = 19 = 0x13
1110 00 000100 0001 0100 000000000101 = 0xE0414005 	;SUB R4, R1, R5    : R4 <= R1 - R5 = 1 - 5 = -4
1110 00 000000 1100 0101 000000001101 = 0xE00C500D 	;AND R5, R12, R13  : R5 <= R12· R13 = 12 · 13 = 12
1110 01 000000 0001 0110 000000000111 = 0xE4016007 	;STR R6, [R1, #7]  : memory address [1+7] <= 6, third word is set to 6
1110 00 111000 1011 0111 000000101010 = 0xE38B702A 	;ORR R7, R11, #42  : R7 <= R11 OR 42 = 11 OR 42 = 43


********************Fowarding Test********************
Program from figure 7.50 for verifying the fowarding works.

Cond Op	Funct	Rn	 Rd      Src2
1110 00 001000 0100 0001 000000000101 = 0xE0841005 	;ADD R1, R4, R5  : R1 <= R4 + R5 = 4 + 5 = 9
1110 00 000000 0001 1000 000000000011 = 0xE0018003 	;AND R8, R1, R3  : R8 <= R1· R3 = 1001 · 0011 = 1
1110 00 011000 0110 1001 000000000001 = 0xE1869001 	;ORR R9, R6, R1  : R9 <= R6 OR R1 = 0110 OR 1001 = 15
1110 00 000100 0001 1010 000000000111 = 0xE041A007 	;SUB R10,R1, R7  : R10 <= R1 - R7 = 9 - 7 = 2

********************Data Hazard Stall Test********************
Program from figure 7.53 for verifying the data hazard stall works.

Cond Op	Funct	Rn	 Rd      Src2
1110 01 000001 0100 0001 000000000000 = 0xE4141000 	;LDR R1 ,[R4, #0] : R1 <= data at memory address (R4+0) = MEM[4] = 6 (the second word)
1110 00 000000 0001 1000 000000000011 = 0xE0018003 	;AND R8 , R1, R3  : R8 <= R1· R3 = 0110 · 0011 = 2
1110 00 011000 0110 1001 000000000001 = 0xE1869001 	;ORR R9 , R6, R1  : R9 <= 0110 OR 0110 = 6
1110 00 000100 0001 1010 000000000111 = 0xE041A007 	;SUB R10, R1, R7  : R10 <= R1 - R7 = 6 - 7 = -1


********************Branch/Control Hazards Test********************
This program is based on figure 7.55 for verifying the control hazards work with branch instrunctions.

Cond Op	Funct	Rn	 Rd      Src2
1110 00 001000 0001 0000 000000000010 = 0xE0810002 	;ADD R0 , R1, R2 : R0 <= R1 + R2 = 1 + 2 = 3
1110 00 001000 0110 0101 000000000111 = 0xE0865007 	;ADD R5 , R6, R7 : R5 <= R6 + R7 = 6 + 7 = 13
1110 10 10 000000000000000000000011   = 0xEA000003	;B 3  			 : PC should be set to 28 to jump to the last instruction, keep in mind the PC increments by 4 as the B instruction needs to be decoded before the stall is implemented
1110 00 000000 0001 1000 000000000011 = 0xE0018003 	;AND R8 , R1, R3 : INE (Instruction not executed)
1110 00 011000 0110 1001 000000000001 = 0xE1869001 	;ORR R9 , R6, R1 : INE
1110 00 000100 0001 1010 000000000111 = 0xE041A007 	;SUB R10, R1, R7 : INE
1110 00 000100 0001 1011 000000001000 = 0xE041B008 	;SUB R11, R1, R8 : INE
1110 00 001000 0011 1100 000000000100 = 0xE083C004 	;ADD R12, R3, R4 : R12 <= R3 + R4 = 3 + 4 = 7
